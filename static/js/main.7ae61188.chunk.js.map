{"version":3,"sources":["apps/shared/components/modules/HeaderModule.js","apps/home/stores/home/actions.js","apps/home/containers/HomeContainer.js","apps/home/stores/home/reducer.js","apps/home/stores/home/store.js","apps/home/HomeRouter.js","apps/gamecenter/stores/puzzlepanel/actions.js","apps/gamecenter/components/puzzlepanel/atoms/PanelAtom.js","apps/gamecenter/stores/puzzlepanel/constants.js","apps/gamecenter/components/puzzlepanel/blocks/BoardBlock.js","apps/gamecenter/components/puzzlepanel/modules/ProblemModule.js","apps/gamecenter/components/puzzlepanel/modules/AnswerModule.js","apps/gamecenter/components/puzzlepanel/modules/OperationModule.js","apps/gamecenter/containers/PuzzlePanelContainer.js","apps/gamecenter/stores/puzzlepanel/logics.js","apps/gamecenter/stores/puzzlepanel/reducer.js","apps/gamecenter/stores/puzzlepanel/store.js","apps/gamecenter/stores/lattice/actions.js","apps/gamecenter/stores/lattice/constants.js","apps/gamecenter/components/lattice/atoms/StoneAtom.js","apps/gamecenter/components/lattice/blocks/BoardBlock.js","apps/gamecenter/components/lattice/modules/BoardModule.js","apps/gamecenter/components/lattice/modules/OperationModule.js","apps/gamecenter/components/lattice/blocks/StonePanelBlock.js","apps/gamecenter/components/lattice/modules/UserModule.js","apps/gamecenter/containers/LatticeContainer.js","apps/gamecenter/stores/lattice/logics.js","apps/gamecenter/stores/lattice/reducer.js","apps/gamecenter/stores/lattice/cpu.js","apps/gamecenter/stores/lattice/store.js","apps/gamecenter/GameCenterRouter.js","index.js"],"names":["HeaderModule","props","Navbar","bg","variant","to","Brand","href","Nav","Link","NavDropdown","title","Item","React","Component","WELCOME","act_welcome","type","HomeContainer","Container","fluid","Row","Col","xl","lg","md","sm","xs","Button","onClick","this","size","block","connect","state","actions","initialState","message","reducer","action","alert","createStore","HomeRouter","exact","path","store","HomeStore","INIT_STATE","CREATE_PROBLEM_RANDOM","FLIP_ANSWER_PANELS","JUDGE_ANSWER","RESET_ANSER","act_init_state","act_create_problem_random","act_flip_answer_panels","x","y","act_judge_answer","act_reset_answer","PanelAtom","panel","src","process","style","height","imgPanel","BoardBlock","trs","panels","map","row","trBoard","border","tds","col","tdBoard","handle_click","tableBoard","ProblemModule","Card","Header","Body","AnswerModule","OperationModule","PuzzlePanelContainer","prevProps","prevState","snapshot","cntFlip","problemPanels","answerPanels","createInitState","numPanel","initPanel","createProblemRandom","i","push","j","cntFlips","Math","floor","random","c_x","c_y","flipPanels","flipPanel","judge","logics","cpy_answerPanels","JSON","parse","stringify","setTimeout","GRAB_STONE","PUT_STONE","UPDATE_SCORE","UPDATE_BOARD_SIZE","THINK_CPU","act_grab_stone","stone","act_put_stone","act_update_score","act_update_board_size","boardSize","act_think_cpu","STONE_PLAYER2","PLAYER2","StoneAtom","position","C","px","py","backgroundImage","stones","styles","td","isGrabbed","styleSelected","onMouseEnter","handle_enter_td","onTouchStart","onTouchEnd","handle_leave","handle_click_td","updatePxPy","table","onMouseLeave","tbodyBoard","BoardModule","window","addEventListener","handleUpdateBoardSize","document","getElementById","clientWidth","setState","len","left","top","width","numLattice","textAlign","stonesDummy","lattices","length","stylesDummyLattices","abs","grabbedStone","cells","stylesDummyCells","stylesLattices","stylesCells","id","paddingTop","boardBlocksDummy","boardBlocksStones","StonePanelBlock","stoneAtoms","smallStones","player","bigStones","disabled","isMyTurn","stoneAtomsSmall","stoneAtomsBig","name","Title","score","LatticeContainer","cntTurn","nextPlayer","UserModule","player1","player2","createEmptyStones","calcInitSmallStones","calcInitBigStones","copyArray","array","calcScore","calcScoreLogic1","addScore","canPut","cpu","player_numSmall","player_numBig","cpu_numSmall","cpu_numBig","depth","minMax","depthMax","isCpuTurn","predictions","putStone","tmp_score","removeStone","console","log","cpy_lattices","cpy_cells","prediction","think","dir","GameCenterRouter","PuzzlePanelStore","LatticeStore","ReactDOM","render","StrictMode","basename"],"mappings":"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","file":"static/js/main.7ae61188.chunk.js","sourcesContent":["import React from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\n\nclass HeaderModule extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Navbar bg=\"light\" variant=\"light\">\n                <LinkContainer to=\"/\">\n                    <Navbar.Brand href=\"/\">Vacant</Navbar.Brand>\n                </LinkContainer>\n                <LinkContainer to=\"/\">\n                    <Nav.Link href=\"/\">Home</Nav.Link>\n                </LinkContainer>\n                <NavDropdown title=\"GameCenter\">\n                    <LinkContainer to=\"/gamecenter/puzzlepanel\">\n                        <NavDropdown.Item>PuzzlePanel</NavDropdown.Item>\n                    </LinkContainer>\n                    <LinkContainer to=\"/gamecenter/lattice\">\n                        <NavDropdown.Item>Lattice</NavDropdown.Item>\n                    </LinkContainer>\n                </NavDropdown>\n            </Navbar>\n        );\n    }\n}\n\nexport default HeaderModule;","/* ========================================================================== */\n/* Action Types                                                               */\n/* ========================================================================== */\nexport const WELCOME = \"@home/home/welcome\";\n\n\n/* ========================================================================== */\n/* Actions                                                                    */\n/* ========================================================================== */\nexport const act_welcome = () => ({\n    type: WELCOME,\n});","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\n\nimport HeaderModule from '../../shared/components/modules/HeaderModule';\n\nimport * as actions from '../stores/home/actions';\n\nclass HomeContainer extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    \n    render() {\n        return (\n            <div>\n                <HeaderModule />\n                <br />\n                <Container fluid>\n                    <Row>\n                        <Col></Col>\n                        <Col xl={8} lg={8} md={8} sm={8} xs={8}>\n                            <h1>Welcome to My Home</h1>\n                            <Button onClick={this.props.act_welcome} size=\"lg\" block>Click Me</Button>\n                        </Col>\n                        <Col></Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({ ...state });\n\nexport default connect(mapStateToProps, actions)(HomeContainer);","/* ========================================================================== */\n/* Import                                                                     */\n/* ========================================================================== */\nimport * as actions from './actions';\n\n/* ========================================================================== */\n/* State                                                                      */\n/* ========================================================================== */\nconst initialState = {\n    message: \"welcome\",\n};\n\n/* ========================================================================== */\n/* Reducer                                                                    */\n/* ========================================================================== */\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actions.WELCOME:\n            alert(state.message);\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport default createStore(reducer);","import React from 'react';\nimport { Route } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\n\nimport HomeContainer from './containers/HomeContainer';\nimport HomeStore from './stores/home/store';\n\nclass HomeRouter extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <Route exact path=\"/\">\n                    <Provider store={HomeStore}>\n                        <HomeContainer />\n                    </Provider>\n                </Route>\n            </div>\n        )\n    }\n}\n\nexport default HomeRouter;","/* ========================================================================== */\n/* Action Types                                                               */\n/* ========================================================================== */\nexport const INIT_STATE = \"@gamecenter/puzzlepanel/init_state\";\nexport const CREATE_PROBLEM_RANDOM = \"@gamecenter/puzzlepanel/create_prob_random\";\nexport const FLIP_ANSWER_PANELS = \"@gamecenter/puzzlepanel/flip_answer_panels\";\nexport const JUDGE_ANSWER = \"@gamecenter/puzzlepanel/judge_answer\";\nexport const RESET_ANSER = \"@gamecenter/puzzlepanel/reset_answer\";\n\n/* ========================================================================== */\n/* Actions                                                                    */\n/* ========================================================================== */\nexport const act_init_state = () => ({\n    type: INIT_STATE,\n});\n\nexport const act_create_problem_random = () => ({\n    type: CREATE_PROBLEM_RANDOM,\n});\n\nexport const act_flip_answer_panels = (x, y) => ({\n    type: FLIP_ANSWER_PANELS,\n    x: x,\n    y: y,\n});\n\nexport const act_judge_answer = () => ({\n    type: JUDGE_ANSWER,\n});\n\nexport const act_reset_answer = () => ({\n    type: RESET_ANSER,\n});","import React from 'react';\n\nimport * as C from '../../../stores/puzzlepanel/constants';\n\nclass PanelAtom extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    imgPanel() {\n        if (this.props.panel === C.PANEL_FRONT) {\n            return (\n                <img\n                    src={process.env.PUBLIC_URL + \"/images/luffy.png\"}\n                    style={{ height: \"50px\" }}\n                />\n            );\n        }\n        else {\n            return (\n                <img\n                    src={process.env.PUBLIC_URL + \"/images/enel.png\"}\n                    style={{ height: \"50px\" }}\n                />\n            );\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                { this.imgPanel() }\n            </div>\n        );\n    }\n}\n\nexport default PanelAtom;","export const NUM_PANEL_INIT = 4;\n\nexport const PANEL_FRONT = 0;\nexport const PANEL_BACK = 1;\n\nexport const PANEL_OBVERSE = 0;\nexport const PANEL_REVERSE = 1;","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\nimport PanelAtom from '../atoms/PanelAtom';\n\nclass BoardBlock extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    tableBoard() {\n        let trs = this.props.panels.map((row, y) => {\n            return this.trBoard(row, y);\n        });\n        return (\n            <table style={{ border: \"solid 1px\" }}>\n                <tbody>\n                    {trs}\n                </tbody>\n            </table>\n        );\n    }\n\n    trBoard(row, y) {\n        let tds = row.map((col, x) => {\n            return this.tdBoard(col, y, x);\n        });\n        return (\n            <tr style={{border: \"solid 1px\"}}>\n                {tds}\n            </tr>\n        );\n    }\n\n    tdBoard(col, y, x) {\n        return (\n            <td\n                style={{ border: \"solid 1px\" }}\n                onClick={() => this.props.handle_click(x, y)}\n            >\n                <PanelAtom\n                    panel={col}\n                    x={x}\n                    y={y}\n                />\n            </td>\n        )\n    }\n\n    render() {\n        return (\n            <Row>\n                <Col></Col>\n                <Col xl={10} lg={10} md={10} sm={10} xs={10}>\n                    {this.tableBoard()}\n                </Col>\n                <Col></Col>\n            </Row>\n        );\n    }\n}\n\nexport default BoardBlock;","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nimport BoardBlock from '../blocks/BoardBlock';\n\nclass ProblemModule extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Card>\n                <Card.Header>\n                    <b>Problem</b>\n                </Card.Header>\n                <Card.Body>\n                    <BoardBlock\n                        panels={this.props.panels}\n                        handle_click={() => alert(\"ズルはいけません\")}\n                    />\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default ProblemModule;","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nimport BoardBlock from '../blocks/BoardBlock';\n\nclass AnswerModule extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Card>\n                <Card.Header>\n                    <b>Answer</b>\n                </Card.Header>\n                <Card.Body>\n                    <BoardBlock\n                        panels={this.props.panels}\n                        handle_click={this.props.act_flip_answer_panels}\n                    />\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default AnswerModule;","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { Card, Button } from 'react-bootstrap';\n\nclass OperationModule extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Card>\n                <Card.Header>\n                    <b>Operation</b>\n                </Card.Header>\n                <Card.Body>\n                    <Row>\n                        <Col>\n                            <Button onClick={() => this.props.act_create_problem_random()}>問題生成</Button>\n                        </Col>\n                        <Col>\n                            <Button onClick={() => this.props.act_reset_answer()}>解答リセット</Button>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default OperationModule;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport HeaderModule from '../../shared/components/modules/HeaderModule';\n\nimport * as actions from '../stores/puzzlepanel/actions';\nimport ProblemModule from '../components/puzzlepanel/modules/ProblemModule';\nimport AnswerModule from '../components/puzzlepanel/modules/AnswerModule';\nimport OperationModule from '../components/puzzlepanel/modules/OperationModule';\n\nclass PuzzlePanelContainer extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.act_init_state();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.cntFlip !== this.props.cntFlip) {\n            this.props.act_judge_answer();\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <HeaderModule />\n                <br />\n                <Container fluid>\n                    <Row>\n                        <Col xl={12} lg={12} md={12} sm={12} xs={12}>\n                            <OperationModule\n                                act_create_problem_random={this.props.act_create_problem_random}\n                                act_reset_answer={this.props.act_reset_answer}\n                            />\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col xl={6} lg={6} md={6} sm={12} xs={12}>\n                            <ProblemModule\n                                panels={this.props.problemPanels}\n                            />\n                        </Col>\n                        <Col xl={6} lg={6} md={6} sm={12} xs={12}>\n                            <AnswerModule\n                                panels={this.props.answerPanels}\n                                act_flip_answer_panels={this.props.act_flip_answer_panels}\n                            />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({ ...state });\n\nexport default connect(mapStateToProps, actions)(PuzzlePanelContainer);","import * as C from './constants';\n\nexport const createInitState = () => {\n    let initState = {\n        numPanel: C.NUM_PANEL_INIT,\n        cntFlip: 0,\n        problemPanels: initPanel(C.NUM_PANEL_INIT),\n        answerPanels: initPanel(C.NUM_PANEL_INIT),\n    };\n\n    return initState;\n};\n\nexport const createProblemRandom = (numPanel) => {\n    let problemPanels = [];\n    for (let i = 0; i < numPanel; i++) {\n        problemPanels.push([]);\n        for (let j = 0; j < numPanel; j++) {\n            problemPanels[i].push(C.PANEL_FRONT);\n        }\n    }\n\n    let cntFlips = Math.floor(Math.random() * 11) + 3;\n    for (let i = 0; i < cntFlips; i++) {\n        let c_x = Math.floor(Math.random() * (numPanel + 1));\n        let c_y = Math.floor(Math.random() * (numPanel + 1));\n        problemPanels = flipPanels(problemPanels, c_x, c_y, numPanel);\n    }\n\n    return problemPanels;\n};\n\nexport const flipPanels = (panels, c_x, c_y, numPanel) => {\n    panels = flipPanel(panels, c_x - 1, c_y - 1, numPanel);\n    panels = flipPanel(panels, c_x - 1, c_y,     numPanel);\n    panels = flipPanel(panels, c_x - 1, c_y + 1, numPanel);\n    panels = flipPanel(panels, c_x,     c_y - 1, numPanel);\n    panels = flipPanel(panels, c_x,     c_y,     numPanel);\n    panels = flipPanel(panels, c_x,     c_y + 1, numPanel);\n    panels = flipPanel(panels, c_x + 1, c_y - 1, numPanel);\n    panels = flipPanel(panels, c_x + 1, c_y,     numPanel);\n    panels = flipPanel(panels, c_x + 1, c_y + 1, numPanel);\n\n    return panels;\n}\n\nconst flipPanel = (panels, x, y, numPanel) => {\n    if (x >= 0 && x < numPanel && y >= 0 && y < numPanel) {\n        if (panels[y][x] === C.PANEL_FRONT) {\n            panels[y][x] = C.PANEL_BACK;\n        }\n        else {\n            panels[y][x] = C.PANEL_FRONT;\n        }\n    }\n\n    return panels;\n}\n\nexport const judge = (problemPanels, answerPanels, numPanel) => {\n    for (let y = 0; y < numPanel; y++) {\n        for (let x = 0; x < numPanel; x++) {\n            if (problemPanels[y][x] !== answerPanels[y][x]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nexport const initPanel = (numPanel) => {\n    let panels = [];\n    for (let i = 0; i < numPanel; i++) {\n        panels.push([]);\n        for (let j = 0; j < numPanel; j++) {\n            panels[i].push(C.PANEL_FRONT);\n        }\n    }\n    return panels;\n}","/* ========================================================================== */\n/* Import                                                                     */\n/* ========================================================================== */\nimport * as actions from './actions';\nimport * as logics from './logics';\n\n/* ========================================================================== */\n/* Reducer                                                                    */\n/* ========================================================================== */\nconst reducer = (state = logics.createInitState(), action) => {\n    switch (action.type) {\n        case actions.INIT_STATE:\n            return logics.createInitState();\n        case actions.CREATE_PROBLEM_RANDOM:\n            return {\n                ...state,\n                problemPanels: logics.createProblemRandom(state.numPanel),\n                answerPanels: logics.initPanel(state.numPanel),\n            }\n        case actions.FLIP_ANSWER_PANELS:\n            let cpy_answerPanels = JSON.parse(JSON.stringify(state.answerPanels));\n            let cntFlip = state.cntFlip + 1;\n            return {\n                ...state,\n                answerPanels: logics.flipPanels(cpy_answerPanels, action.x, action.y, state.numPanel),\n                cntFlip: state.cntFlip + 1,\n            }\n        case actions.JUDGE_ANSWER:\n            if (logics.judge(state.problemPanels, state.answerPanels, state.numPanel)) {\n                setTimeout(() => alert(\"CLEAR\"), 1);\n            }\n            return {\n                ...state,\n            }\n        case actions.RESET_ANSER:\n            return {\n                ...state,\n                answerPanels: logics.initPanel(state.numPanel),\n                cntFlip: 0,\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport default createStore(reducer);","/* ========================================================================== */\n/* Action Types                                                               */\n/* ========================================================================== */\nexport const INIT_STATE = \"@gamecenter/lattice/init_state\";\nexport const GRAB_STONE = \"@gamecenter/lattice/grab_stone\";\nexport const PUT_STONE = \"@gamecenter/lattice/put_stone\";\nexport const UPDATE_SCORE = \"@gamecenter/lattice/update_score\";\nexport const UPDATE_BOARD_SIZE = \"@gamecenter/lattice/update_board_size\";\nexport const THINK_CPU = \"@gmaecenter/lattice/think_cpu\";\n\n/* ========================================================================== */\n/* Actions                                                                    */\n/* ========================================================================== */\nexport const act_init_state = () => ({\n    type: INIT_STATE,\n});\n\nexport const act_grab_stone = (stone) => ({\n    type: GRAB_STONE,\n    stone: stone,\n});\n\nexport const act_put_stone = (x, y) => ({\n    type: PUT_STONE,\n    x: x,\n    y: y,\n});\n\nexport const act_update_score = () => ({\n    type: UPDATE_SCORE,\n});\n\nexport const act_update_board_size = (boardSize) => ({\n    type: UPDATE_BOARD_SIZE,\n    boardSize: boardSize,\n});\n\nexport const act_think_cpu = () => ({\n    type: THINK_CPU,\n});","export const NUM_LATTICE = 5;\n\nexport const STONE_EMPTY = 0;\nexport const STONE_PLAYER1 = 1;\nexport const STONE_PLAYER2 = -1;\n\nexport const STONE_LATTICE = 1;\nexport const STONE_CELL = 2;\n\nexport const PLAYER1 = STONE_PLAYER1;\nexport const PLAYER2 = STONE_PLAYER2;\n\nexport const IMG_PATH_BLACK = '/images/black.png';\nexport const IMG_PATH_WHITE = '/images/white.png';","import React from 'react';\n\nimport * as C from '../../../stores/lattice/constants';\n\nclass StoneAtom extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let style = {\n            height: this.props.size + 'px',\n            position: 'relative',\n        }\n        if (this.props.stone === C.STONE_PLAYER1) {\n            return (\n                <img src={process.env.PUBLIC_URL + C.IMG_PATH_BLACK} style={style} />\n            );\n        }\n        else if (this.props.stone === C.STONE_PLAYER2) {\n            return (\n                <img src={process.env.PUBLIC_URL + C.IMG_PATH_WHITE} style={style} />\n            );\n        }\n        else {\n            return (\n                <div></div>\n            )\n        }\n    }\n}\n\nexport default StoneAtom;","import React from 'react';\n\nimport StoneAtom from '../atoms/StoneAtom';\n\nclass BoardBlock extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            px: -1,\n            py: -1,\n        }\n    }\n\n    styleSelected() {\n        return {\n            backgroundImage: '-webkit-radial-gradient(#ff0000 0%, #ffffff 70%)',\n            backgroundImage: 'radial-gradient(#ff0000 0%, #ffffff 70%)',\n        }\n    }\n\n    tbodyBoard() {\n        let trs = this.props.stones.map((row, y) => {\n            return this.trBoard(row, y);\n        });\n        return (\n            <tbody>\n                {trs}\n            </tbody>\n        );\n    }\n\n    trBoard(row, y) {\n        let tds = row.map((col, x) => {\n            return this.tdBoard(col, y, x);\n        });\n        return (\n            <tr>\n                {tds}\n            </tr>\n        );\n    }\n\n    tdBoard(col, y, x) {\n        let style = this.props.styles.td;\n        if (this.props.px === x && this.props.py === y && this.props.isGrabbed) {\n            style = {\n                ...style,\n                ...this.styleSelected(),\n            }\n        }\n        return (\n            <td\n                style={style}\n                onMouseEnter={() => this.handle_enter_td(x, y)}\n                onTouchStart={() => this.handle_enter_td(x, y)}\n                onTouchEnd={() => this.handle_leave()}\n                onClick={() => this.handle_click_td(x, y)}\n            >\n                <StoneAtom\n                    stone={col}\n                    size={this.props.size}\n                />\n            </td>\n        )\n    }\n\n    handle_enter_td(x, y) {\n        if (this.props.updatePxPy) {\n            this.props.updatePxPy(x, y);\n        }\n    }\n\n    handle_click_td(x, y) {\n        if (this.props.act_put_stone) {\n            this.props.act_put_stone(x, y);\n        }\n        if (this.props.updatePxPy) {\n            this.props.updatePxPy(-1, -1);\n        }\n    }\n\n    handle_leave() {\n        if (this.props.updatePxPy) {\n            this.props.updatePxPy(-1, -1);\n        }\n    }\n\n    render() {\n        return (\n            <table\n                style={this.props.styles.table}\n                onMouseLeave={() => this.handle_leave()}\n            >\n                {this.tbodyBoard()}\n            </table>\n        );\n    }\n}\n\nexport default BoardBlock;","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nimport BoardBlock from '../blocks/BoardBlock';\nimport * as C from '../../../stores/lattice/constants';\n\nclass BoardModule extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            px: -1,\n            py: -1,\n        }\n\n        window.addEventListener('resize', () => this.handleUpdateBoardSize());\n    }\n\n    componentDidMount() {\n        this.handleUpdateBoardSize();\n    }\n\n    handleUpdateBoardSize() {\n        let boardSize = Math.floor(document.getElementById('board-parent').clientWidth * 0.8);\n        this.props.act_update_board_size(boardSize);\n    }\n\n    updatePxPy(x, y) {\n        this.setState({\n            px: x,\n            py: y,\n        });\n    }\n\n    stonesDummy(len) {\n        let stones = [];\n        for (let i = 0; i < len; i++) {\n            stones.push([]);\n            for (let j = 0; j < len; j++) {\n                stones[i].push(C.STONE_EMPTY);\n            }\n        }\n        return stones;\n    }\n\n    stylesDummyLattices() {\n        return {\n            table: {\n                position: 'absolute',\n                left: 0,\n                top: 0,\n            },\n            td: {\n                width: Math.floor(this.props.boardSize / this.props.numLattice) + 'px',\n                height: Math.floor(this.props.boardSize / this.props.numLattice) + 'px',\n                border: 'none',\n                textAlign: 'center',\n            }\n        };\n    }\n\n    stylesDummyCells() {\n        return {\n            table: {\n                position: 'absolute',\n                left: Math.floor(this.props.boardSize / this.props.numLattice) / 2 + 'px',\n                top: Math.floor(this.props.boardSize / this.props.numLattice) / 2 + 'px',\n            },\n            td: {\n                width: Math.floor(this.props.boardSize / this.props.numLattice) + 'px',\n                height: Math.floor(this.props.boardSize / this.props.numLattice) + 'px',\n                border: 'solid 1px',\n                textAlign: 'center',\n            }\n        };\n    }\n\n    stylesLattices() {\n        return {\n            table: {\n                position: 'absolute',\n                left: 0,\n                top: 0,\n            },\n            td: {\n                width: Math.floor(this.props.boardSize / this.props.numLattice) + 'px',\n                height: Math.floor(this.props.boardSize / this.props.numLattice) + 'px',\n                border: 'none',\n                textAlign: 'center',\n            }\n        };\n    }\n\n    stylesCells() {\n        return {\n            table: {\n                position: 'absolute',\n                left: Math.floor(this.props.boardSize / this.props.numLattice) / 2 + 'px',\n                top: Math.floor(this.props.boardSize / this.props.numLattice) / 2 + 'px',\n            },\n            td: {\n                width: Math.floor(this.props.boardSize / this.props.numLattice) + 'px',\n                height: Math.floor(this.props.boardSize / this.props.numLattice) + 'px',\n                border: 'none',\n                textAlign: 'center',\n            }\n        };\n    }\n\n    boardBlocksDummy() {\n        return (\n            <div>\n                <BoardBlock\n                    stones={this.stonesDummy(this.props.lattices.length)}\n                    styles={this.stylesDummyLattices()}\n                    isGrabbed={Math.abs(this.props.grabbedStone) === C.STONE_LATTICE}\n                    px={this.state.px}\n                    py={this.state.py}\n                    size={0}\n                />\n                <BoardBlock\n                    stones={this.stonesDummy(this.props.cells.length)}\n                    styles={this.stylesDummyCells()}\n                    isGrabbed={Math.abs(this.props.grabbedStone) === C.STONE_CELL}\n                    px={this.state.px}\n                    py={this.state.py}\n                    size={0}\n                />\n            </div>\n        );\n    }\n\n    boardBlocksStones() {\n        if (Math.abs(this.props.grabbedStone) === C.STONE_CELL) {\n            return (\n                <div>\n                    <BoardBlock\n                        stones={this.props.lattices}\n                        styles={this.stylesLattices()}\n                        size={Math.floor(this.props.boardSize / this.props.numLattice * 0.3)}\n                    />\n                    <BoardBlock\n                        stones={this.props.cells}\n                        styles={this.stylesCells()}\n                        updatePxPy={(x, y) => this.updatePxPy(x, y)}\n                        act_put_stone={(x, y) => this.props.act_put_stone(x, y)}\n                        size={Math.floor(this.props.boardSize / this.props.numLattice * 0.7)}\n                    />\n                </div>\n            );\n        }\n        else if (Math.abs(this.props.grabbedStone) === C.STONE_LATTICE) {\n            return (\n                <div>\n                    <BoardBlock\n                        stones={this.props.cells}\n                        styles={this.stylesCells()}\n                        size={Math.floor(this.props.boardSize / this.props.numLattice * 0.7)}\n                    />\n                    <BoardBlock\n                        stones={this.props.lattices}\n                        styles={this.stylesLattices()}\n                        updatePxPy={(x, y) => this.updatePxPy(x, y)}\n                        act_put_stone={(x, y) => this.props.act_put_stone(x, y)}\n                        size={Math.floor(this.props.boardSize / this.props.numLattice * 0.3)}\n                    />\n                </div>\n            );\n        }\n        else {\n            return (\n                <div>\n                    <BoardBlock\n                        stones={this.props.lattices}\n                        styles={this.stylesLattices()}\n                        size={Math.floor(this.props.boardSize / this.props.numLattice * 0.3)}\n                    />\n                    <BoardBlock\n                        stones={this.props.cells}\n                        styles={this.stylesCells()}\n                        size={Math.floor(this.props.boardSize / this.props.numLattice * 0.7)}\n                    />\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <Card>\n                <Card.Header>\n                    <b>Lattice Board</b>\n                </Card.Header>\n                <Card.Body>\n                    <div id='board-parent' style={{ position: 'relative', paddingTop: '80%', left: Math.floor(this.props.boardSize / 8) + 'px' }}>\n                        { this.boardBlocksDummy() }\n                        { this.boardBlocksStones() }\n                    </div>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default BoardModule;","import React from 'react';\nimport { Card, Button } from 'react-bootstrap';\n\nclass OperationModule extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Card>\n                <Card.Header>\n                    <b>Operation</b>\n                </Card.Header>\n                <Card.Body>\n                    <Button onClick={() => this.props.act_init_state()}>Reset</Button>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default OperationModule;","import React from 'react';\nimport { Row, Col, Button } from 'react-bootstrap';\n\nimport StoneAtom from '../atoms/StoneAtom';\nimport * as C from '../../../stores/lattice/constants';\n\nclass StonePanelBlock extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    stoneAtomsSmall() {\n        let stoneAtoms = [];\n        for (let i = 0; i < this.props.smallStones; i++) {\n            stoneAtoms.push(\n                <StoneAtom\n                    stone={this.props.player}\n                    size={Math.floor(this.props.boardSize / this.props.numLattice * 0.3)}\n                />\n            )\n        }\n        return stoneAtoms;\n    }\n\n    stoneAtomsBig() {\n        let stoneAtoms = [];\n        for (let i = 0; i < this.props.bigStones; i++) {\n            stoneAtoms.push(\n                <StoneAtom\n                    stone={this.props.player}\n                    size={Math.floor(this.props.boardSize / this.props.numLattice * 0.7)}\n                />\n            )\n        }\n        return stoneAtoms;\n    }\n\n    render() {\n        return (\n            <div>\n                <Row>\n                    <Col xl={4} lg={4} md={4} sm={4} xs={4}>\n                        <Button\n                            variant='outline-secondary'\n                            size='sm'\n                            onClick={() => this.props.act_grab_stone(this.props.player * C.STONE_LATTICE)}\n                            disabled={!this.props.isMyTurn || !this.props.smallStones}\n                            block\n                        >\n                            Grab\n                        </Button>\n                    </Col>\n                    <Col xl={8} lg={8} md={8} sm={8} xs={8}>\n                        {this.stoneAtomsSmall()}\n                    </Col>\n                </Row>\n                <br />\n                <Row>\n                    <Col xl={4} lg={4} md={4} sm={4} xs={4}>\n                        <Button\n                            variant='outline-secondary'\n                            size='sm'\n                            onClick={() => this.props.act_grab_stone(this.props.player * C.STONE_CELL)}\n                            disabled={!this.props.isMyTurn || !this.props.bigStones}\n                            block\n                        >\n                            Grab\n                        </Button>\n                    </Col>\n                    <Col xl={8} lg={8} md={8} sm={8} xs={8}>\n                        {this.stoneAtomsBig()}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default StonePanelBlock;","import React from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport StonePanelBlock from '../blocks/StonePanelBlock';\n\nclass OperationModule extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Card>\n                <Card.Header>\n                    <b>{this.props.name}</b>\n                    <i>{this.props.isMyTurn && \" It's your turn.\"}</i>\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>Score</Card.Title>\n                    {this.props.score} Victory Points\n                    <hr />\n                    <Card.Title>Operations</Card.Title>\n                    <Button\n                        variant=\"outline-danger\"\n                        disabled={!this.props.isMyTurn}\n                    >Surrender</Button>\n                    <hr />\n                    <Card.Title>Stones</Card.Title>\n                    <StonePanelBlock\n                        numLattice={this.props.numLattice}\n                        player={this.props.player}\n                        smallStones={this.props.smallStones}\n                        bigStones={this.props.bigStones}\n                        boardSize={this.props.boardSize}\n                        isMyTurn={this.props.isMyTurn}\n                        act_grab_stone={this.props.act_grab_stone}\n                    />\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default OperationModule;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport HeaderModule from '../../shared/components/modules/HeaderModule';\n\nimport * as actions from '../stores/lattice/actions';\nimport * as C from '../stores/lattice/constants';\nimport BoardModule from '../components/lattice/modules/BoardModule';\nimport OperationModule from '../components/lattice/modules/OperationModule';\nimport UserModule from '../components/lattice/modules/UserModule';\n\nclass LatticeContainer extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        \n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.cntTurn !== this.props.cntTurn) {\n            this.props.act_update_score();\n            if (this.props.nextPlayer === C.PLAYER2) {\n                this.props.act_think_cpu();\n            }\n        }\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    render() {\n        return (\n            <div>\n                <HeaderModule />\n                <br />\n                <Container fluid>\n                    <Row>\n                        <Col xl={12} lg={12} md={12} sm={12} xs={12}>\n                            <OperationModule\n                                act_init_state={this.props.act_init_state}\n                            />\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col xl={3} lg={3} md={3} sm={12} xs={12}>\n                            <UserModule\n                                name={\"PLAYER 1\"}\n                                score={this.props.player1.score}\n                                player={C.STONE_PLAYER1}\n                                numLattice={this.props.numLattice}\n                                boardSize={this.props.boardSize}\n                                smallStones={this.props.player1.smallStones}\n                                bigStones={this.props.player1.bigStones}\n                                isMyTurn={this.props.nextPlayer === C.PLAYER1}\n                                act_grab_stone={this.props.act_grab_stone}\n                            />\n                        </Col>\n                        <Col xl={6} lg={6} md={6} sm={12} xs={12}>\n                            <BoardModule\n                                numLattice={this.props.numLattice}\n                                boardSize={this.props.boardSize}\n                                lattices={this.props.lattices}\n                                cells={this.props.cells}\n                                grabbedStone={this.props.grabbedStone}\n                                act_put_stone={this.props.act_put_stone}\n                                act_update_board_size={this.props.act_update_board_size}\n                            />\n                        </Col>\n                        <Col xl={3} lg={3} md={3} sm={12} xs={12}>\n                            <UserModule\n                                name={\"PLAYER 2\"}\n                                score={this.props.player2.score}\n                                player={C.STONE_PLAYER2}\n                                numLattice={this.props.numLattice}\n                                boardSize={this.props.boardSize}\n                                smallStones={this.props.player2.smallStones}\n                                bigStones={this.props.player2.bigStones}\n                                isMyTurn={this.props.nextPlayer === C.PLAYER2}\n                                act_grab_stone={this.props.act_grab_stone}\n                            />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({ ...state });\n\nexport default connect(mapStateToProps, actions)(LatticeContainer);","import * as C from './constants';\n\nexport const createInitState = () => {\n    return {\n        numLattice: C.NUM_LATTICE,\n        lattices: createEmptyStones(C.NUM_LATTICE),\n        cells: createEmptyStones(C.NUM_LATTICE - 1),\n        player1: {\n            smallStones: calcInitSmallStones(),\n            bigStones: calcInitBigStones(),\n            score: 0,\n        },\n        player2: {\n            smallStones: calcInitSmallStones(),\n            bigStones: calcInitBigStones(),\n            score: 0,\n        },\n        cntTurn: 0,\n        nextPlayer: C.PLAYER1,\n        grabbedStone: C.STONE_EMPTY,\n        boardSize: 50,\n    }\n};\n\nexport const createEmptyStones = (len) => {\n    let stones = [];\n    for (let i = 0; i < len; i++) {\n        stones.push([]);\n        for (let j = 0; j < len; j++) {\n            stones[i].push(C.STONE_EMPTY);\n        }\n    }\n    return stones;\n}\n\nconst calcInitSmallStones = () => {\n    return Math.floor(C.NUM_LATTICE * (C.NUM_LATTICE - 1) / 2);\n}\n\nconst calcInitBigStones = () => {\n    return Math.floor((C.NUM_LATTICE - 2) * (C.NUM_LATTICE - 2) / 2);\n}\n\nexport const copyArray = (array) => {\n    return JSON.parse(JSON.stringify(array));\n}\n\nexport const calcScore = (lattices, cells, player) => {\n    return calcScoreLogic1(lattices, cells, player);\n}\n\nconst calcScoreLogic1 = (lattices, cells, player) => {\n    let score = 0;\n    for (let y = 0; y < cells.length; y++) {\n        for (let x = 0; x < cells.length; x++) {\n            if (cells[y][x] == player) {\n                let addScore = 0;\n                addScore += player * lattices[y][x];\n                addScore += player * lattices[y + 1][x];\n                addScore += player * lattices[y][x + 1];\n                addScore += player * lattices[y + 1][x + 1];\n                if (addScore == 4) {\n                    score += 5;\n                }\n                else {\n                    score += addScore;\n                }\n            }\n        }\n    }\n    return score;\n}\n\nexport const canPut = (stones, x, y) => {\n    return (stones[y][x] === C.STONE_EMPTY);\n}","/* ========================================================================== */\n/* Import                                                                     */\n/* ========================================================================== */\nimport * as actions from './actions';\nimport * as logics from './logics';\nimport * as C from './constants';\nimport LatticeCPU from './cpu';\n\nconst cpu = new LatticeCPU();\n\n/* ========================================================================== */\n/* Reducer                                                                    */\n/* ========================================================================== */\nconst reducer = (state = logics.createInitState(), action) => {\n    switch (action.type) {\n        case actions.INIT_STATE:\n            return {\n                ...logics.createInitState(),\n                boardSize: state.boardSize,\n            }\n        case actions.GRAB_STONE:\n            return {\n                ...state,\n                grabbedStone: action.stone,\n            }\n        case actions.PUT_STONE:\n            if (Math.abs(state.grabbedStone) === C.STONE_LATTICE) {\n                if (state.lattices[action.y][action.x] === C.STONE_EMPTY) {\n                    let cpy_lattices = logics.copyArray(state.lattices);\n                    if (state.grabbedStone >= C.STONE_PLAYER1) {\n                        cpy_lattices[action.y][action.x] = C.STONE_PLAYER1;\n\n                        return {\n                            ...state,\n                            lattices: cpy_lattices,\n                            player1: {\n                                smallStones: state.player1.smallStones - 1,\n                                bigStones: state.player1.bigStones,\n                                score: state.player1.score,\n                            },\n                            cntTurn: state.cntTurn + 1,\n                            nextPlayer: C.PLAYER2,\n                            grabbedStone: C.STONE_EMPTY,\n                        }\n                    }\n                    else {\n                        cpy_lattices[action.y][action.x] = C.STONE_PLAYER2;\n\n                        return {\n                            ...state,\n                            lattices: cpy_lattices,\n                            player2: {\n                                smallStones: state.player2.smallStones - 1,\n                                bigStones: state.player2.bigStones,\n                                score: state.player2.score,\n                            },\n                            cntTurn: state.cntTurn + 1,\n                            nextPlayer: C.PLAYER1,\n                            grabbedStone: C.STONE_EMPTY,\n                        }\n                    }\n                }\n            }\n            else if (Math.abs(state.grabbedStone) === C.STONE_CELL) {\n                if (state.cells[action.y][action.x] === C.STONE_EMPTY) {\n                    let cpy_cells = logics.copyArray(state.cells);\n                    if (state.grabbedStone >= C.STONE_PLAYER1) {\n                        cpy_cells[action.y][action.x] = C.STONE_PLAYER1;\n\n                        return {\n                            ...state,\n                            cells: cpy_cells,\n                            player1: {\n                                smallStones: state.player1.smallStones,\n                                bigStones: state.player1.bigStones - 1,\n                                score: state.player1.score,\n                            },\n                            cntTurn: state.cntTurn + 1,\n                            nextPlayer: C.PLAYER2,\n                            grabbedStone: C.STONE_EMPTY,\n                        }\n                    }\n                    else {\n                        cpy_cells[action.y][action.x] = C.STONE_PLAYER2;\n\n                        return {\n                            ...state,\n                            cells: cpy_cells,\n                            player2: {\n                                smallStones: state.player2.smallStones,\n                                bigStones: state.player2.bigStones - 1,\n                                score: state.player2.score,\n                            },\n                            cntTurn: state.cntTurn + 1,\n                            nextPlayer: C.PLAYER1,\n                            grabbedStone: C.STONE_EMPTY,\n                        }\n                    }\n                }\n            }\n            \n            return {\n                ...state,\n            }\n        case actions.UPDATE_SCORE:\n            return {\n                ...state,\n                player1: {\n                    smallStones: state.player1.smallStones,\n                    bigStones: state.player1.bigStones,\n                    score: logics.calcScore(state.lattices, state.cells, C.PLAYER1),\n                },\n                player2: {\n                    smallStones: state.player2.smallStones,\n                    bigStones: state.player2.bigStones,\n                    score: logics.calcScore(state.lattices, state.cells, C.PLAYER2),\n                }\n            }\n        case actions.UPDATE_BOARD_SIZE:\n            return {\n                ...state,\n                boardSize: action.boardSize,\n            }\n        case actions.THINK_CPU:\n            let prediction = cpu.think(\n                state.lattices,\n                state.cells,\n                state.player1.smallStones,\n                state.player1.bigStones,\n                state.player2.smallStones,\n                state.player2.bigStones,\n                3\n            );\n            console.dir(prediction);\n            if (prediction) {\n                if (Math.abs(prediction.stone) === C.STONE_LATTICE) {\n                    let cpy_lattices = logics.copyArray(state.lattices);\n                    cpy_lattices[prediction.py][prediction.px] = C.STONE_PLAYER2;\n    \n                    return {\n                        ...state,\n                        lattices: cpy_lattices,\n                        player2: {\n                            smallStones: state.player2.smallStones - 1,\n                            bigStones: state.player2.bigStones,\n                            score: state.player2.score,\n                        },\n                        cntTurn: state.cntTurn + 1,\n                        nextPlayer: C.PLAYER1,\n                        grabbedStone: C.STONE_EMPTY,\n                    }\n                }\n                else {\n                    let cpy_cells = logics.copyArray(state.cells);\n                    cpy_cells[prediction.py][prediction.px] = C.STONE_PLAYER2;\n    \n                    return {\n                        ...state,\n                        cells: cpy_cells,\n                        player2: {\n                            smallStones: state.player2.smallStones,\n                            bigStones: state.player2.bigStones - 1,\n                            score: state.player2.score,\n                        },\n                        cntTurn: state.cntTurn + 1,\n                        nextPlayer: C.PLAYER1,\n                        grabbedStone: C.STONE_EMPTY,\n                    }\n                }\n            }\n            return {\n                ...state,\n            }\n        default:\n            return {\n                ...state,\n            }\n    }\n}\n\nexport default reducer;","import * as logics from './logics';\nimport * as actions from './actions';\nimport * as C from './constants';\n\nclass LatticeCPU {\n    constructor() {\n        \n    }\n\n    think(lattices, cells, player_numSmall, player_numBig, cpu_numSmall, cpu_numBig, depth) {\n        return this.minMax(lattices, cells, player_numSmall, player_numBig, cpu_numSmall, cpu_numBig, depth, depth, true, []);\n    }\n\n    minMax(lattices, cells, player_numSmall, player_numBig, cpu_numSmall, cpu_numBig, depth, depthMax, isCpuTurn, predictions) {\n        let score = 0;\n        let stone = 0;\n        let px = -1;\n        let py = -1;\n        if (isCpuTurn) {\n            score = -9999;\n        }\n        else {\n            score = 9999;\n        }\n\n        if (depth == 0) {\n            return logics.calcScore(lattices, cells, C.PLAYER2) - logics.calcScore(lattices, cells, C.PLAYER1);\n        }\n\n        if (isCpuTurn) {\n            if (cpu_numSmall + cpu_numSmall === 0) {\n                return logics.calcScore(lattices, cells, C.PLAYER2) - logics.calcScore(lattices, cells, C.PLAYER1);\n            }\n            if (cpu_numSmall > 0) {\n                for (let y = 0; y < lattices.length; y++) {\n                    for (let x = 0; x < lattices.length; x++) {\n                        if (logics.canPut(lattices, x, y)) {\n                            this.putStone(lattices, y, x, C.STONE_PLAYER2);\n                            let tmp_score = this.minMax(\n                                lattices,\n                                cells,\n                                player_numSmall,\n                                player_numBig,\n                                cpu_numSmall - 1,\n                                cpu_numBig,\n                                depth - 1,\n                                depthMax,\n                                !isCpuTurn,\n                                predictions\n                            )\n                            if (tmp_score > score) {\n                                score = tmp_score;\n                                stone = C.STONE_LATTICE * C.STONE_PLAYER2;\n                                px = x;\n                                py = y;\n                            }\n                            this.removeStone(lattices, y, x);\n                        }\n                    }\n                }\n            }\n            if (cpu_numBig > 0) {\n                for (let y = 0; y < cells.length; y++) {\n                    for (let x = 0; x < cells.length; x++) {\n                        if (logics.canPut(cells, x, y)) {\n                            this.putStone(cells, y, x, C.STONE_PLAYER2);\n                            let tmp_score = this.minMax(\n                                lattices,\n                                cells,\n                                player_numSmall,\n                                player_numBig,\n                                cpu_numSmall,\n                                cpu_numBig - 1,\n                                depth - 1,\n                                depthMax,\n                                !isCpuTurn,\n                                predictions\n                            )\n                            if (tmp_score > score) {\n                                score = tmp_score;\n                                stone = C.STONE_CELL * C.STONE_PLAYER2;\n                                px = x;\n                                py = y;\n                            }\n                            this.removeStone(cells, y, x);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (player_numSmall + player_numSmall === 0) {\n                return logics.calcScore(lattices, cells, C.PLAYER2) - logics.calcScore(lattices, cells, C.PLAYER1);\n            }\n            if (player_numSmall > 0) {\n                for (let y = 0; y < lattices.length; y++) {\n                    for (let x = 0; x < lattices.length; x++) {\n                        if (logics.canPut(lattices, x, y)) {\n                            this.putStone(lattices, y, x, C.STONE_PLAYER1);\n                            let tmp_score = this.minMax(\n                                lattices,\n                                cells,\n                                player_numSmall - 1,\n                                player_numBig,\n                                cpu_numSmall,\n                                cpu_numBig,\n                                depth - 1,\n                                depthMax,\n                                !isCpuTurn,\n                                predictions\n                            )\n                            if (tmp_score < score) {\n                                score = tmp_score;\n                                stone = C.STONE_LATTICE * C.STONE_PLAYER1;\n                                px = x;\n                                py = y;\n                            }\n                            this.removeStone(lattices, y, x);\n                        }\n                    }\n                }\n            }\n            if (player_numBig > 0) {\n                for (let y = 0; y < cells.length; y++) {\n                    for (let x = 0; x < cells.length; x++) {\n                        if (logics.canPut(cells, x, y)) {\n                            this.putStone(cells, y, x, C.STONE_PLAYER1);\n                            let tmp_score = this.minMax(\n                                lattices,\n                                cells,\n                                player_numSmall,\n                                player_numBig - 1,\n                                cpu_numSmall,\n                                cpu_numBig,\n                                depth - 1,\n                                depthMax,\n                                !isCpuTurn,\n                                predictions\n                            )\n                            if (tmp_score < score) {\n                                score = tmp_score;\n                                stone = C.STONE_CELL * C.STONE_PLAYER1;\n                                px = x;\n                                py = y;\n                            }\n                            this.removeStone(cells, y, x);\n                        }\n                    }\n                }\n            }\n        }\n        \n        if (depth === depthMax) {\n            return {\n                score: score,\n                stone: stone,\n                px: px,\n                py: py,\n            };\n        }\n        else {\n            console.log(depth + \" - (\" + px + \", \" + py + \") =\" + score);\n            return score;\n        }\n    }\n\n    putStone(stones, y, x, player) {\n        stones[y][x] = player;\n        return;\n    }\n\n    removeStone(stones, y, x) {\n        stones[y][x] = C.STONE_EMPTY;\n        return;\n    }\n}\n\nexport default LatticeCPU;","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport default createStore(reducer);","import React from 'react';\nimport { Route } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\n\nimport PuzzlePanelContainer from './containers/PuzzlePanelContainer';\nimport PuzzlePanelStore from './stores/puzzlepanel/store';\n\nimport LatticeContainer from './containers/LatticeContainer';\nimport LatticeStore from './stores/lattice/store';\n\nclass GameCenterRouter extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <Route exact path=\"/gamecenter/puzzlepanel\">\n                    <Provider store={PuzzlePanelStore}>\n                        <PuzzlePanelContainer />\n                    </Provider>\n                </Route>\n                <Route exact path=\"/gamecenter/lattice\">\n                    <Provider store={LatticeStore}>\n                        <LatticeContainer />\n                    </Provider>\n                </Route>\n            </div>\n        )\n    }\n}\n\nexport default GameCenterRouter;","/* ========================================================================== */\n/* React-Redux                                                                */\n/* ========================================================================== */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n/* ========================================================================== */\n/* App Routers                                                                */\n/* ========================================================================== */\nimport HomeRouter from './apps/home/HomeRouter';\nimport GameCenterRouter from './apps/gamecenter/GameCenterRouter';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router basename={process.env.PUBLIC_URL}>\n            <HomeRouter />\n            <GameCenterRouter />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}